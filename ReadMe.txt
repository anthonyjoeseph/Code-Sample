	The class "HuntForPlayer" is part of is a game called "Detonate", a clone of the nintendo classic "Bomberman". It's written in Objective-C. In the game, the player walks around a 2d orthogonal tiled map filled with blocks and bad guys.
	Each bad guy follows a set of behaviors determined at runtime. One function of a behavior is to determine which way the moving bad guy should turn when it reaches a new tile. "HuntForPlayer" is one such behavior.
	Some of the bad guys follow the player around the board. A problem encountered was that the if the bad guy simply turns towards the player, it often gets stuck behind a group of blocks. Clearly, the bad guy has to turn a direction that would lead it along viable path that leads to the player. "HuntForPlayer" implements this behavior.
	To find a possible path, this class has a method called bestDirectionFrom:to:traversed:, which checks if any of its neighbors are its goal position (the player), and if not, recursively calls itself on all of its neighbor tiles (up, down, right, and left). It returns the direction of the first of its neighbors to return something. 
 	This method passes to itself an array containing the traversed tiles so that any one potential path doesn't ever cross over itself. After each neighbor is checked, this array is reverted back to its original state so that different potential paths can use the same tile.
	For efficiency's sake, it checks the directions in a particular order based on the start point's position relative to the player. For example, if the start position is very high above the player and a little to the left of it, the preferable order to check the directions in would be down, and then right, and if neither of these worked and it had to backtrack, it would be best to first check left, and then, as a last resort, up.
	For dramatic effect, it's best to picture the bad guy using this behavior as a giant eyeball.